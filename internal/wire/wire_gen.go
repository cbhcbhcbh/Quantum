// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/cbhcbhcbh/Quantum/pkg/chat"
	"github.com/cbhcbhcbh/Quantum/pkg/common/log"
	"github.com/cbhcbhcbh/Quantum/pkg/common/server"
	"github.com/cbhcbhcbh/Quantum/pkg/common/sonyflake"
	"github.com/cbhcbhcbh/Quantum/pkg/config"
	"github.com/cbhcbhcbh/Quantum/pkg/infra"
)

// Injectors from wire.go:

func InitializeChatServer(name string) (*server.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	httpLog, err := log.NewHttpLog(configConfig)
	if err != nil {
		return nil, err
	}
	engine := chat.NewGinServer(name, httpLog, configConfig)
	melodyChatConn := chat.NewMelodyChatConn(configConfig)
	router := infra.NewSimpleRouter()
	subscriber, err := infra.NewKafkaSubscriber(configConfig)
	if err != nil {
		return nil, err
	}
	messageSubscriber, err := chat.NewMessageSubscriber(router, configConfig, subscriber, melodyChatConn)
	if err != nil {
		return nil, err
	}
	universalClient, err := infra.NewredisClient(configConfig)
	if err != nil {
		return nil, err
	}
	redisCacheImpl := infra.NewRedisCacheImpl(universalClient)
	session, err := infra.NewCassandraSession(configConfig)
	if err != nil {
		return nil, err
	}
	userClientConn, err := chat.NewUserClientConn(configConfig)
	if err != nil {
		return nil, err
	}
	userRepoImpl := chat.NewUserRepoImpl(session, userClientConn)
	userRepoCacheImpl := chat.NewUserRepoCacheImpl(redisCacheImpl, userRepoImpl)
	userServiceImpl := chat.NewUserServiceImpl(userRepoCacheImpl)
	publisher, err := infra.NewKafkaPublisher(configConfig)
	if err != nil {
		return nil, err
	}
	messageRepoImpl := chat.NewMessageRepoImpl(configConfig, session, publisher)
	messageRepoCacheImpl := chat.NewMessageRepoCacheImpl(messageRepoImpl)
	idGenerator, err := sonyflake.NewSonyFlake()
	if err != nil {
		return nil, err
	}
	messageServiceImpl := chat.NewMessageServiceImpl(messageRepoCacheImpl, userRepoCacheImpl, idGenerator)
	channelRepoImpl := chat.NewChannelRepoImpl(session)
	channelRepoCacheImpl := chat.NewChannelRepoCacheImpl(redisCacheImpl, channelRepoImpl)
	channelServiceImpl := chat.NewChannelServiceImpl(channelRepoCacheImpl, userRepoCacheImpl, idGenerator)
	forwarderClientConn, err := chat.NewForwarderClientConn(configConfig)
	if err != nil {
		return nil, err
	}
	forwardRepoImpl := chat.NewForwardRepoImpl(forwarderClientConn)
	forwardServiceImpl := chat.NewForwardServiceImpl(forwardRepoImpl)
	httpServer := chat.NewHttpServer(name, httpLog, configConfig, engine, melodyChatConn, messageSubscriber, userServiceImpl, messageServiceImpl, channelServiceImpl, forwardServiceImpl)
	grpcLog, err := log.NewGrpcLog(configConfig)
	if err != nil {
		return nil, err
	}
	grpcServer := chat.NewGrpcServer(name, grpcLog, configConfig, userServiceImpl, channelServiceImpl)
	chatRouter := chat.NewRouter(httpServer, grpcServer)
	infraCloser := chat.NewInfraCloser()
	serverServer := server.NewServer(name, chatRouter, infraCloser)
	return serverServer, nil
}
