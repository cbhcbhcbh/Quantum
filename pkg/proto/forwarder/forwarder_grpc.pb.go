// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: forwarder/forwarder.proto

package forwarder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ForwardService_RegisterChannelSession_FullMethodName = "/forwarder.ForwardService/RegisterChannelSession"
	ForwardService_RemoveChannelSession_FullMethodName   = "/forwarder.ForwardService/RemoveChannelSession"
)

// ForwardServiceClient is the client API for ForwardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwardServiceClient interface {
	RegisterChannelSession(ctx context.Context, in *RegisterChannelSessionRequest, opts ...grpc.CallOption) (*RegisterChannelSessionResponse, error)
	RemoveChannelSession(ctx context.Context, in *RemoveChannelSessionRequest, opts ...grpc.CallOption) (*RemoveChannelSessionResponse, error)
}

type forwardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForwardServiceClient(cc grpc.ClientConnInterface) ForwardServiceClient {
	return &forwardServiceClient{cc}
}

func (c *forwardServiceClient) RegisterChannelSession(ctx context.Context, in *RegisterChannelSessionRequest, opts ...grpc.CallOption) (*RegisterChannelSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterChannelSessionResponse)
	err := c.cc.Invoke(ctx, ForwardService_RegisterChannelSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardServiceClient) RemoveChannelSession(ctx context.Context, in *RemoveChannelSessionRequest, opts ...grpc.CallOption) (*RemoveChannelSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveChannelSessionResponse)
	err := c.cc.Invoke(ctx, ForwardService_RemoveChannelSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwardServiceServer is the server API for ForwardService service.
// All implementations must embed UnimplementedForwardServiceServer
// for forward compatibility.
type ForwardServiceServer interface {
	RegisterChannelSession(context.Context, *RegisterChannelSessionRequest) (*RegisterChannelSessionResponse, error)
	RemoveChannelSession(context.Context, *RemoveChannelSessionRequest) (*RemoveChannelSessionResponse, error)
	mustEmbedUnimplementedForwardServiceServer()
}

// UnimplementedForwardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForwardServiceServer struct{}

func (UnimplementedForwardServiceServer) RegisterChannelSession(context.Context, *RegisterChannelSessionRequest) (*RegisterChannelSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterChannelSession not implemented")
}
func (UnimplementedForwardServiceServer) RemoveChannelSession(context.Context, *RemoveChannelSessionRequest) (*RemoveChannelSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChannelSession not implemented")
}
func (UnimplementedForwardServiceServer) mustEmbedUnimplementedForwardServiceServer() {}
func (UnimplementedForwardServiceServer) testEmbeddedByValue()                        {}

// UnsafeForwardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwardServiceServer will
// result in compilation errors.
type UnsafeForwardServiceServer interface {
	mustEmbedUnimplementedForwardServiceServer()
}

func RegisterForwardServiceServer(s grpc.ServiceRegistrar, srv ForwardServiceServer) {
	// If the following call pancis, it indicates UnimplementedForwardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ForwardService_ServiceDesc, srv)
}

func _ForwardService_RegisterChannelSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterChannelSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardServiceServer).RegisterChannelSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForwardService_RegisterChannelSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardServiceServer).RegisterChannelSession(ctx, req.(*RegisterChannelSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForwardService_RemoveChannelSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChannelSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardServiceServer).RemoveChannelSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForwardService_RemoveChannelSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardServiceServer).RemoveChannelSession(ctx, req.(*RemoveChannelSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForwardService_ServiceDesc is the grpc.ServiceDesc for ForwardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForwardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwarder.ForwardService",
	HandlerType: (*ForwardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterChannelSession",
			Handler:    _ForwardService_RegisterChannelSession_Handler,
		},
		{
			MethodName: "RemoveChannelSession",
			Handler:    _ForwardService_RemoveChannelSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forwarder/forwarder.proto",
}
