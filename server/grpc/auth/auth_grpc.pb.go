// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcAuth

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImAuthHandlerClient is the client API for ImAuthHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImAuthHandlerClient interface {
	CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error)
}

type imAuthHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewImAuthHandlerClient(cc grpc.ClientConnInterface) ImAuthHandlerClient {
	return &imAuthHandlerClient{cc}
}

func (c *imAuthHandlerClient) CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error) {
	out := new(CheckAuthResponse)
	err := c.cc.Invoke(ctx, "/ImAuthHandler/CheckAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImAuthHandlerServer is the server API for ImAuthHandler service.
// All implementations must embed UnimplementedImAuthHandlerServer
// for forward compatibility
type ImAuthHandlerServer interface {
	CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error)
	mustEmbedUnimplementedImAuthHandlerServer()
}

// UnimplementedImAuthHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedImAuthHandlerServer struct {
}

func (UnimplementedImAuthHandlerServer) CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedImAuthHandlerServer) mustEmbedUnimplementedImAuthHandlerServer() {}

// UnsafeImAuthHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImAuthHandlerServer will
// result in compilation errors.
type UnsafeImAuthHandlerServer interface {
	mustEmbedUnimplementedImAuthHandlerServer()
}

func RegisterImAuthHandlerServer(s grpc.ServiceRegistrar, srv ImAuthHandlerServer) {
	s.RegisterService(&ImAuthHandler_ServiceDesc, srv)
}

func _ImAuthHandler_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImAuthHandlerServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImAuthHandler/CheckAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImAuthHandlerServer).CheckAuth(ctx, req.(*CheckAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImAuthHandler_ServiceDesc is the grpc.ServiceDesc for ImAuthHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImAuthHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImAuthHandler",
	HandlerType: (*ImAuthHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuth",
			Handler:    _ImAuthHandler_CheckAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/protos/auth.proto",
}
